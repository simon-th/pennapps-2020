import random
import string
import math
import base64
import json
import itertools

import spotipy
import spotipy.util as util

from im_analysis import image_to_color_norm

from operator import itemgetter
from urllib.request import urlopen

from spotipy.oauth2 import SpotifyOAuth
from flask import Flask, redirect, request, jsonify
from flask_cors import CORS

# Constants
RANDOM_STRING_LENGTH = 16
FRONTEND_URL = 'http://localhost:3000/'

# Global variables
state = ''
scope = 'playlist-read-collaborative playlist-modify-public playlist-read-private playlist-modify-private'
sp = ''
oauth = ''
logged_in = False
image_url = ''

# Flask App
app = Flask(__name__)
CORS(app)


@app.route('/')
def hello_world():
    if logged_in:
        return 'Hello %s!' % sp.current_user()['display_name']
    return 'Hello, World!'


@app.route('/login', methods=['GET'])
def login():
    global state
    global oauth
    state = generate_random_string(RANDOM_STRING_LENGTH)
    oauth = SpotifyOAuth(
        state=state,
        scope=scope,
        cache_path='./token_cache'
    )
    return redirect(oauth.get_authorize_url())


@app.route('/callback', methods=['GET'])
def callback():
    global sp
    global logged_in
    all_args = request.args.to_dict()
    oauth.get_access_token(code=all_args['code'])
    sp = spotipy.Spotify(auth_manager=oauth)
    logged_in = True
    return redirect(FRONTEND_URL + '?login=y')


@app.route('/logout', methods=['GET'])
def logout():
    global state
    global oauth
    global sp
    global logged_in
    state = ''
    oauth = ''
    sp = ''
    logged_in = ''
    return redirect(FRONTEND_URL + '?logout=y')


@app.route('/get_user', methods=['GET'])
def get_user():
    if not logged_in:
        return None
    return sp.current_user()

# For getting list of playlists for user selection


@app.route('/get_playlists', methods=['GET'])
def get_playlists():
    if not logged_in:
        return None
    return sp.current_user_playlists()


@app.route('/upload_image', methods=['POST'])
def upload_image():
    global image_url

    return redirect(image_url)


@app.route('/create_playlist', methods=['POST'])
def create_playlist():
    if not logged_in:
        return None

    data = json.loads(request.data.decode('UTF-8'))
    image_url = data['image_url']   # Image URL from Firebase Storage
    playlists = sp.current_user_playlists()   # List of playlist IDs
    playlist_ids = []
    for playlist in playlists['items']:
        playlist_ids.append(playlist['id'])

    # TODO: Dummy playlists work! Change to above though
    # playlists = ["spotify:playlist:048no6E8ZLciZ8ZiiPdHy3", "spotify:playlist:1sAGSgV8Ww5tFCG7JSWLr6"]

    # Array of Arrays with one dict per inner array
    tracks = []

    tr_tmp = set()
    ''' Gets all track audio features from selected playlist ids'''
    for pl_id in playlist_ids:
         pl_content = sp.playlist_items(pl_id, fields='items.track.id', additional_types=['track'])
         for tr_dict in pl_content['items']:
             tr_tmp.add(tr_dict['track']['id'])
    tr_tmp = list(tr_tmp)
    for idx in range(0, len(tr_tmp) // 99):
        tracks.append(sp.audio_features(tracks=tr_tmp[idx*99:(idx+1)*99]))
    tracks.append(sp.audio_features(tracks=tr_tmp[len(tr_tmp) // 99 * 99: len(tr_tmp)]))
    tracks = list(itertools.chain(*tracks))


    ''' Creates new user playlist. '''
    user_id = sp.me()['id']
    gen_descr = "Autogenerated playlist based on the mood, colors, and vibe of your photo."
    sp.user_playlist_create(user_id, "Audioscape Playlist", public=False,
                            collaborative=False, description=gen_descr)
    playlist_id = get_playlist_id_by_name("Audioscape Playlist", sp.current_user_playlists())
    # sp.playlist_upload_cover(playlist_id, base64.b64encode(urlopen(image_url).read()))

    ''' Hook up values from image analysis here '''
    dance_color_norm, tempo_color_norm = image_to_color_norm(image_url)
    songs = sort_songs(tracks, dance_color_norm)
    sp.playlist_add_items(playlist_id, songs)
    return {}


'''
    Args:
        tr_data - list of audio features of all songs
        image_danceability - float value of danceability
    Output - list of all track uris sorted.
    Can scale to multiple image properties given we change to L2 distance.
'''


def sort_songs(tracks, image_danceability):
    for feature in tracks:
        feature['danceability'] = abs(feature['danceability'] - image_danceability)
    tracks = sorted(tracks, key=itemgetter('tempo'))
    if len(tracks) > 25:
        return [tracks[x]['uri'] for x in range(0, 25)]
    return [tracks[x]['uri'] for x in range(0, len(tracks))]


# Gets a playlist id by the name from a set of playlists
def get_playlist_id_by_name(name, playlists):
    for playlist in playlists['items']:
        if playlist['name'] == name:
            return playlist['id']


def generate_random_string(length):
    choices = string.ascii_letters + string.digits
    return ''.join(random.choice(choices) for i in range(length))
